name: Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      # Manual dispatch is reserved for production redeploys
      confirm:
        description: Type "prod" to confirm production deploy
        required: true
        type: string
        default: prod

permissions:
  contents: read
  pull-requests: write
env:
  NODE_VERSION: '20'
  VERCEL_CLI_VERSION: '32.7.1'

concurrency:
  group: deploy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview_url }}

    outputs:
      preview_url: ${{ steps.deploy.outputs.preview_url }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Vercel CLI
      run: npm install -g vercel@${{ env.VERCEL_CLI_VERSION }}

    - name: 🔐 Pull Vercel env (preview)
      run: vercel pull --yes --environment=preview --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: 🏗️ Build (prebuilt artifact)
      run: vercel build --token ${{ secrets.VERCEL_TOKEN }}

    - name: 🚀 Deploy prebuilt to Vercel (preview)
      id: deploy
      run: |
        set -euo pipefail
        URL=$(vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }} | tail -n1)
        echo "Preview deployment: $URL"
        echo "preview_url=$URL" >> "$GITHUB_OUTPUT"
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  create-release-pr:
    name: 📝 Create Release PR
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📝 Create Pull Request to Main
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if PR from develop to main already exists
        PR_EXISTS=$(gh pr list --base main --head develop --json number --jq '.[0].number' || echo "")

        if [ -z "$PR_EXISTS" ]; then
          echo "Creating new PR from develop to main..."
          gh pr create \
            --base main \
            --head develop \
            --title "🚀 Release: Deploy develop to production" \
            --body "## 🚀 Production Release Candidate

        **Staging Deployment**: Successfully deployed to staging ✅
        **Preview URL**: ${{ needs.deploy-staging.outputs.preview_url }}
        **Security Scans**: All security checks passed ✅
        **Tests**: All tests passing ✅

        ### 📋 Release Checklist
        - [x] Code review completed
        - [x] All CI checks passed
        - [x] Staging deployment successful
        - [x] Security audit completed
        - [ ] Manual QA testing on staging
        - [ ] Performance testing completed
        - [ ] Ready for production deployment

        ### 🔗 Links
        - **Staging URL**: ${{ needs.deploy-staging.outputs.preview_url }}
        - **Test Results**: Check Actions tab
        - **Security Report**: Check Security tab

        ### 📝 Changes
        This PR contains all changes from the develop branch ready for production deployment.

        **⚠️ Review Required**: Manual review and approval required before merging to production.

        ---
        🤖 *Auto-generated by GitHub Actions Run #${{ github.run_number }}*"
        else
          echo "PR #$PR_EXISTS already exists from develop to main"
        fi

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.confirm == 'prod')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.production_url }}

    outputs:
      production_url: ${{ steps.deploy.outputs.production_url }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Vercel CLI
      run: npm install -g vercel@${{ env.VERCEL_CLI_VERSION }}

    - name: 🔐 Pull Vercel env (production)
      run: vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: 🏗️ Build (prebuilt artifact)
      run: vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}

    - name: 🚀 Deploy prebuilt to Vercel (production)
      id: deploy
      run: |
        set -euo pipefail
        URL=$(vercel deploy --prebuilt --prod --token ${{ secrets.VERCEL_TOKEN }} | tail -n1)
        echo "Production deployment: $URL"
        echo "production_url=$URL" >> "$GITHUB_OUTPUT"
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: 🎉 Post-deployment notification
      run: |
        echo "🎉 Successfully deployed to production!"
        echo "🔗 Production URL: https://video-delivery-platform-bv9t.vercel.app/"

  performance-monitoring:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.confirm == 'prod')

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 📊 Run performance tests
      run: npx tsx scripts/test-deployment.ts
      env:
        NODE_ENV: production
        TARGET_URL: ${{ needs.deploy-production.outputs.production_url }}

    - name: 🔍 Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        # Test against the live production URL instead of starting a local server
        lhci autorun --collect.url=https://video-delivery-platform-bv9t.vercel.app/ --collect.url=https://video-delivery-platform-bv9t.vercel.app/videos --collect.url=https://video-delivery-platform-bv9t.vercel.app/upload --collect.startServerCommand="" || echo "Lighthouse CI failed but deployment succeeded"
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
